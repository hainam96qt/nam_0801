// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type BankName string

const (
	BankNameVCB BankName = "VCB"
	BankNameACB BankName = "ACB"
	BankNameVIB BankName = "VIB"
)

func (e *BankName) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BankName(s)
	case string:
		*e = BankName(s)
	default:
		return fmt.Errorf("unsupported scan type for BankName: %T", src)
	}
	return nil
}

type NullBankName struct {
	BankName BankName `json:"bank_name"`
	Valid    bool     `json:"valid"` // Valid is true if BankName is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBankName) Scan(value interface{}) error {
	if value == nil {
		ns.BankName, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BankName.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBankName) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BankName), nil
}

type TransactionType string

const (
	TransactionTypeWithdraw TransactionType = "withdraw"
	TransactionTypeDeposit  TransactionType = "deposit"
)

func (e *TransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionType(s)
	case string:
		*e = TransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionType: %T", src)
	}
	return nil
}

type NullTransactionType struct {
	TransactionType TransactionType `json:"transaction_type"`
	Valid           bool            `json:"valid"` // Valid is true if TransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionType), nil
}

type Account struct {
	ID        int32     `json:"id"`
	UserID    int32     `json:"user_id"`
	Name      string    `json:"name"`
	Bank      BankName  `json:"bank"`
	Balance   float64   `json:"balance"`
	CreatedAt time.Time `json:"created_at"`
}

type Transaction struct {
	ID              int32           `json:"id"`
	Amount          float64         `json:"amount"`
	AccountID       int32           `json:"account_id"`
	TransactionType TransactionType `json:"transaction_type"`
	CreatedAt       time.Time       `json:"created_at"`
}

type User struct {
	ID        int32        `json:"id"`
	Name      string       `json:"name"`
	Email     string       `json:"email"`
	Password  string       `json:"password"`
	CreatedAt sql.NullTime `json:"created_at"`
}
